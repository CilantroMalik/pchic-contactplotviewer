{"version":3,"sources":["features/assetChooser/assetSlice.js","features/infoModal/infoSlice.js","features/assetChooser/AssetChooser.js","features/plotViewer/PlotViewer.js","App.js","app/store.js","index.js"],"names":["assetSlice","createSlice","name","initialState","reducers","setCellType1","state","action","cellType1","payload","setCellType2","cellType2","setGene","gene","actions","infoSlice","setVisible","visible","AssetChooser","options","useSelector","assets","useState","typesSelected","setTypesSelected","geneSelected","setGeneSelected","selecting","setSelecting","dispatch","useDispatch","cellButtons","map","cellType","disabled","className","onClick","includes","temp","push","length","onCellTypeClicked","style","margin","padding","nanoid","width","marginTop","marginLeft","borderColor","backgroundColor","color","flexBasis","placeholder","type","onChange","e","target","value","PlotViewer","image_url","http","XMLHttpRequest","open","send","status","imageExists","process","marginRight","height","borderRadius","src","alt","display","flexDirection","justifyContent","App","plotType","assetType","info","transition","filter","position","top","left","textAlign","marginBottom","store","configureStore","reducer","assetReducer","infoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a791c66.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"cellType1\": \"aCD4\", \"cellType2\": \"naCD4\", \"gene\": \"IL7R\"}\n\nconst assetSlice = createSlice({\n    name: 'assets',\n    initialState,\n    reducers: {\n        setCellType1(state, action) { state.cellType1 = action.payload },\n        setCellType2(state, action) { state.cellType2 = action.payload },\n        setGene(state, action) { state.gene = action.payload }\n    }\n})\n\nexport const { setCellType1, setCellType2, setGene } = assetSlice.actions\n\nexport default assetSlice.reducer","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\"visible\": false}\n\nconst infoSlice = createSlice({\n    name: \"info\",\n    initialState,\n    reducers: {\n        setVisible(state, action) { state.visible = action.payload }\n    }\n})\n\nexport const { setVisible } = infoSlice.actions\n\nexport default infoSlice.reducer","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCellType1, setCellType2, setGene } from \"./assetSlice\";\nimport { setVisible } from \"../infoModal/infoSlice\";\nimport '../../main.css';\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nexport const AssetChooser = () => {\n    const options = useSelector(state => state.assets)\n    const [typesSelected, setTypesSelected] = useState([])\n    const [geneSelected, setGeneSelected] = useState(\"IL7R\")\n    const [selecting, setSelecting] = useState(false)\n    const dispatch = useDispatch()\n\n    const cellTypes = [\"aCD4\", \"EP\", \"Ery\", \"FoeT\", \"Mac0\", \"Mac1\", \"Mac2\", \"MK\", \"Mon\", \"naCD4\", \"nB\", \"nCD4\", \"nCD8\", \"Neu\", \"tB\", \"tCD8\"]\n\n    const onCellTypeClicked = (cellType) => {\n        if (!typesSelected.includes(cellType)) {\n            const temp = typesSelected\n            temp.push(cellType)\n            setTypesSelected(temp)\n        }\n        if (typesSelected.length === 2) {\n            setSelecting(false)\n            dispatch(setCellType1(typesSelected[0]))\n            dispatch(setCellType2(typesSelected[1]))\n        }\n    }\n\n    const onGeneClicked = () => { dispatch(setGene(geneSelected)) }\n\n    const onReselectClicked = () => {\n        setSelecting(true)\n        setTypesSelected([])\n    }\n\n    const infoClicked = () => { dispatch(setVisible(true)) }\n\n    const cellButtons = cellTypes.map(cellType => (\n        <button disabled={!selecting} className={(options.cellType1 === cellType || options.cellType2 === cellType) ? \"button\" : \"muted-button\"}\n                key={nanoid()} onClick={() => onCellTypeClicked(cellType)} style={{margin: \"3px\", padding: \"8px\"}}>{cellType}</button>\n    ))\n\n    return (\n        <>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <button style={{margin: \"3px\"}} onClick={onReselectClicked} className=\"accent-button\">{selecting ? \"Select two...\" : \"Reselect Cell Types\"}</button>\n                {cellButtons}\n                <button className=\"round-button\" onClick={infoClicked}\n                        style={{borderColor: \"mediumpurple\", backgroundColor: \"mediumpurple\", margin: \"3px\", padding: \"12px\", marginLeft: \"6px\"}}>Figure Info</button>\n            </div>\n            <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                <input style={{color: \"antiquewhite\", flexBasis: \"50%\", marginLeft: \"0.2rem\", marginTop: \"0.2rem\"}}\n                       placeholder={geneSelected} type=\"text\" onChange={(e) => { setGeneSelected(e.target.value) }}/>\n                <button style={{marginLeft: \"10px\", marginTop: \"0.2rem\"}} onClick={onGeneClicked}>Choose Gene</button>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport '../../main.css';\nimport { setGene } from \"../assetChooser/assetSlice\";\n\nexport const PlotViewer = () => {\n    const options = useSelector(state => state.assets)\n    const dispatch = useDispatch()\n\n    function imageExists(image_url){\n        let http = new XMLHttpRequest();\n        http.open('HEAD', image_url, false);\n        http.send();\n        return http.status !== 404;\n    }\n\n    if (!imageExists(process.env.PUBLIC_URL+\"/images/\"+options.cellType1+\"/\"+options.gene+\".jpg\")) {\n        dispatch(setGene(\"ERROR\"))\n    }\n\n    return (\n        <>\n            { options.gene !== \"ERROR\" &&\n                <div className=\"flex-row\" style={{width: \"100%\", marginTop: \"0.5rem\", marginLeft: \"0.5rem\"}}>\n                    <h2 style={{\n                        color: \"antiquewhite\",\n                        marginTop: \"19%\",\n                        marginRight: \"10px\"\n                    }}>{options.cellType1}</h2>\n                    <img style={{width: \"38%\", height: \"38%\", margin: \"10px\", borderRadius: \"10px\"}}\n                         src={process.env.PUBLIC_URL + \"/images/\" + options.cellType1 + \"/\" + options.gene + \".jpg\"}\n                         alt=\"\"/>\n                    <img style={{width: \"38%\", height: \"38%\", margin: \"10px\", borderRadius: \"10px\"}}\n                         src={process.env.PUBLIC_URL + \"/images/\" + options.cellType2 + \"/\" + options.gene + \".jpg\"}\n                         alt=\"\"/>\n                    <h2 style={{\n                        color: \"antiquewhite\",\n                        marginTop: \"19%\",\n                        marginLeft: \"10px\"\n                    }}>{options.cellType2}</h2>\n                </div>\n            }\n            { options.gene === \"ERROR\" &&\n                <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n                    <h3 style={{color: \"antiquewhite\"}}>That gene isn't available — perhaps it was mistyped?</h3>\n                </div>\n            }\n        </>\n    )\n}\n","import './App.css';\nimport './main.css';\nimport { AssetChooser } from './features/assetChooser/AssetChooser';\nimport { PlotViewer } from './features/plotViewer/PlotViewer'\nimport React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setVisible } from \"./features/infoModal/infoSlice\";\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const plotType = useSelector(state => state.assets.assetType)\n  const info = useSelector(state => state.info.visible)\n\n  let explanation = \"These plots depict the raw counts of PC-HiC observed interactions vs genomic distance from the bait locus. \" +\n      \"The p-values corresponding to the determined significance of each interaction are also plotted in red on a negative log scale.\"\n\n  return (\n      <>\n        <div className=\"App\" style={info ? {transition: \"filter 0.3s ease-out\", filter: \"blur(10px) opacity(50%) brightness(50%)\"} : {transition: \"filter 0.3s ease-in\"}}>\n          <AssetChooser />\n          <PlotViewer />\n        </div>\n        { info &&\n        <div style={{borderRadius: \"15px\", position: \"absolute\", top: \"25vh\", left: \"25vw\",\n          width: \"50%\", backgroundColor: \"gray\", textAlign: \"center\"}}>\n          <h3 style={{color: \"antiquewhite\"}}>{plotType}</h3>\n          <p style={{margin: \"3%\"}}>{explanation}</p>\n          <button onClick={() => dispatch(setVisible(false))} style={{marginBottom: \"3%\"}}>Close</button>\n        </div>\n        }\n      </>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport assetReducer from '../features/assetChooser/assetSlice';\nimport infoReducer from '../features/infoModal/infoSlice';\n\nexport const store = configureStore({\n    reducer: {\n        assets: assetReducer,\n        info: infoReducer\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}